AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  aws-sam-scratchpad
  
Globals:
  Function:
    Timeout: 3

Parameters:
  AppName:
    Type: String
    Default: aws-sam-scratchpad
  BaseEmailAddress:
    Description: Email address of sender
    Type: String
    Default: matthew.cooper6@btinternet.com

Resources:
  #------ API Gateway Lambda Proxy Roles Config -------------------------------------------------------------------------------------------------------------
  ApiAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: 
            Fn::Sub: ${AppName}-api-access-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - Fn::Sub: ${CreateProductFunction.Arn}
                  - Fn::Sub: ${GetProductFunction.Arn}
                  - Fn::Sub: ${DeleteProductFunction.Arn}
                  - Fn::Sub: ${CreateWarehouseFunction.Arn}
                  - Fn::Sub: ${GetWarehouseFunction.Arn}
                  - Fn::Sub: ${DeleteWarehouseFunction.Arn}
                  - Fn::Sub: ${AddStockOfProductToWarehouseFunction.Arn}
                  - Fn::Sub: ${GetAllStockForProductFunction.Arn}
  
  #------ API Gateway Step Functions Proxy Role Config -------------------------------------------------------------------------------------------------------------
  ApiStepFunctionAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: 
            Fn::Sub: ${AppName}-api-step-function-access-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                  - states:StartSyncExecution
                Resource:
                  - Fn::Sub: ${StateMachine.Arn}
  

  #------ Step Function Config -------------------------------------------------------------------------------------------------------------
  StateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: StateMachine
      DefinitionUri: application/src/state-machines/stateMachine.asl.json
      DefinitionSubstitutions:
        HandleInputFunctionArn:
            Fn::Sub: ${HandleInputFunction.Arn}
        HandleInput2FunctionArn:
            Fn::Sub: ${HandleInput2Function.Arn}
      Role: 
        Fn::Sub: ${StateExecutionRole.Arn}
      Type: EXPRESS
      
  #------ Step Function Roles for Invoking Lamba States  -------------------------------------------------------------------------------------------------------------
  StateExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: "StatesExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "lambda:InvokeFunction"
                Resource:
                  - Fn::Sub: ${HandleInputFunction.Arn}
                  - Fn::Sub: ${HandleInput2Function.Arn}

  #------ State Machine Task Definitions -------------------------------------------------------------------------------------------------------------
  HandleInputFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/src/state-machines/tasks/
      Handler: HandleInput.handleInput
      Runtime: nodejs18.x
      Architectures:
        - x86_64
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - HandleInput.ts

  HandleInput2Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/src/state-machines/tasks/
      Handler: HandleInput2.handleInput
      Runtime: nodejs18.x
      Architectures:
        - x86_64
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - HandleInput2.ts
  
  SendSESEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/src/state-machines/tasks/
      Handler: SendSESEmail.sendEmail
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
       - SESCrudPolicy:
          IdentityName: !Ref BaseEmailAddress
      Environment:
        Variables:
          EMAIL_ADDRESS: !Ref BaseEmailAddress
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - SendSESEmail.ts
  #------ API Config -------------------------------------------------------------------------------------------------------------
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: ${AppName}-api
      StageName: development
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: application/src/service-layer/swagger.yaml
  
  #------ Cognito UserPool Config -------------------------------------------------------------------------------------------------------------
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: CognitoUserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
  
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: CognitoUserPoolClient
      GenerateSecret: false

  #------ DYNAMO Config -------------------------------------------------------------------------------------------------------------
  ExampleTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: single-table-design-table
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  #------ PRODUCTS Lambda Functions -------------------------------------------------------------------------------------------------------------
  CreateProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/src/service-layer/lambda-handlers/
      Handler: ProductHandler.createProduct
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
       - DynamoDBCrudPolicy:
          TableName: !Ref ExampleTable
      Environment:
        Variables:
          TABLE_NAME: !Ref ExampleTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - ProductHandler.ts

  GetProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/src/service-layer/lambda-handlers/
      Handler: ProductHandler.getProduct
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
       - DynamoDBCrudPolicy:
          TableName: !Ref ExampleTable
      Environment:
        Variables:
          TABLE_NAME: !Ref ExampleTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - ProductHandler.ts

  DeleteProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/src/service-layer/lambda-handlers/
      Handler: ProductHandler.deleteProduct
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
       - DynamoDBCrudPolicy:
          TableName: !Ref ExampleTable
      Environment:
        Variables:
          TABLE_NAME: !Ref ExampleTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - ProductHandler.ts

  #------ WAREHOUSE Lambda Functions ------------------------------------------------------------------------------------------------------------
  CreateWarehouseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/src/service-layer/controllers/
      Handler: WarehouseController.createWarehouse
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
       - DynamoDBCrudPolicy:
          TableName: !Ref ExampleTable
      Environment:
        Variables:
          TABLE_NAME: !Ref ExampleTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - WarehouseController.ts

  GetWarehouseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/src/service-layer/controllers/
      Handler: WarehouseController.getWarehouse
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
       - DynamoDBCrudPolicy:
          TableName: !Ref ExampleTable
      Environment:
        Variables:
          TABLE_NAME: !Ref ExampleTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - WarehouseController.ts

  DeleteWarehouseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/src/service-layer/controllers/
      Handler: WarehouseController.deleteWarehouse
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
       - DynamoDBCrudPolicy:
          TableName: !Ref ExampleTable
      Environment:
        Variables:
          TABLE_NAME: !Ref ExampleTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - WarehouseController.ts

#------ PRODUCT_WAREHOUSE Lambda Functions------------------------------------------------------------------------------------------------------------
  AddStockOfProductToWarehouseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/src/service-layer/controllers/
      Handler: ProductWarehouseController.addStockOfProductToWarehouse
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
       - DynamoDBCrudPolicy:
          TableName: !Ref ExampleTable
       - SNSPublishMessagePolicy:
          TopicName: !GetAtt ProductWarehouseSNSTopic.TopicName
      Environment:
        Variables:
          TABLE_NAME: !Ref ExampleTable
          SNS_TOPIC: !Ref ProductWarehouseSNSTopic
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - ProductWarehouseController.ts

  PrintTopicSubscriptionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/src/service-layer/subscriptions/
      Handler: ProductWarehouseSubscriptions.print
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref ProductWarehouseSNSTopic
            SqsSubscription: true
      Environment:
        Variables:
          SNS_TOPIC: !Ref ProductWarehouseSNSTopic
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - ProductWarehouseSubscriptions.ts

  GetAllStockForProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/src/service-layer/controllers/
      Handler: ProductWarehouseController.getAllStockForProduct
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
       - DynamoDBCrudPolicy:
          TableName: !Ref ExampleTable
      Environment:
        Variables:
          TABLE_NAME: !Ref ExampleTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - ProductWarehouseController.ts
  
#------ SNS Definitons ------------------------------------------------------------------------------------------------------------
  ProductWarehouseSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: ProductWarehouseSNSTopic
      TopicName: ProductWarehouseSNSTopic

