AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Cloudformation template for my SAM application  
  
Globals:
  Function:
    Timeout: 30

Parameters:
  AppName:
    Type: String
    Default: scratchpad
  Stage:
    Type: String
    Default: development
  BaseEmailAddress:
    Description: Email address of sender
    Type: String
    Default: matthew.cooper6@btinternet.com
  AccessPointName:
    Type: String
    Default:  my-access-point

Resources:
  #------ S3 Bucket Config -------------------------------------------------------------------------------------------------------------
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketName: matts-example-bucket

  S3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: '*'
            Effect: Allow
            Resource:
              - !GetAtt S3Bucket.Arn
              - !Sub ${S3Bucket.Arn}/*
            Principal:
              AWS: '*'
            Condition:
              StringEquals:
                's3:DataAccessPointAccount': !Sub ${AWS::AccountId}

  LambdaS3AccessPointRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: 
            !Sub ${AppName}-s3-access-point-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  S3AccessPoint:
    Type: 'AWS::S3::AccessPoint'
    Properties:
      Name:             
        !Sub ${AccessPointName}
      Bucket: !Ref S3Bucket
      Policy:
        Version: "2012-10-17"
        Statement:
          - Action:
              - 's3:GetObject'
              - 's3:PutObject'
            Effect: Allow
            Resource:
               - !Sub  'arn:${AWS::Partition}:s3:${AWS::Region}:${AWS::AccountId}:accesspoint/${AccessPointName}/object/*'
            Principal:
              AWS: !GetAtt LambdaS3AccessPointRole.Arn

  #------ API Gateway Lambda Proxy Roles Config -------------------------------------------------------------------------------------------------------------
  ApiAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AppName}-api-access-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt CreateProductFunction.Arn
                  - !GetAtt GetProductFunction.Arn
                  - !GetAtt DeleteProductFunction.Arn
                  - !GetAtt CreateWarehouseFunction.Arn
                  - !GetAtt GetWarehouseFunction.Arn
                  - !GetAtt DeleteWarehouseFunction.Arn
                  - !GetAtt AddStockOfProductToWarehouseFunction.Arn
                  - !GetAtt GetAllStockForProductFunction.Arn
  
  #------ API Gateway Step Functions Proxy Role Config -------------------------------------------------------------------------------------------------------------
  ApiStepFunctionAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: 
            !Sub ${AppName}-api-step-function-access-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                  - states:StartSyncExecution
                Resource:
                  - !Sub ${StateMachine.Arn}
  

  #------ Step Function Config -------------------------------------------------------------------------------------------------------------
  StateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: StateMachine
      DefinitionUri: application/src/state-machines/stateMachine.asl.json
      DefinitionSubstitutions:
        HandleInputFunctionArn:
            !GetAtt HandleInputFunction.Arn
        HandleInput2FunctionArn:
            !GetAtt HandleInput2Function.Arn
        SendSESEmailFunctionArn:
            !GetAtt SendSESEmailFunction.Arn
        UploadJSONToBucketFunctionArn:
            !GetAtt UploadJSONToBucketFunction.Arn
      Role: 
        !Sub ${StateExecutionRole.Arn}
      Type: EXPRESS
      
  #------ Step Function Roles for Invoking Lamba States  -------------------------------------------------------------------------------------------------------------
  StateExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: "StatesExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "lambda:InvokeFunction"
                Resource:
                  - !GetAtt HandleInputFunction.Arn
                  - !GetAtt HandleInput2Function.Arn
                  - !GetAtt SendSESEmailFunction.Arn
                  - !GetAtt UploadJSONToBucketFunction.Arn
  
  #------ LambdaAuth Definitions -------------------------------------------------------------------------------------------------------------
  LambdaTokenAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/src/service-layer/auth/
      Handler: LambdaAuthorizer.authorize
      Runtime: nodejs18.x
      Architectures:
        - x86_64
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - LambdaAuthorizer.ts

  AuthorizerLambdaAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: 
            !Sub ${AppName}-api-lambda-authorizer-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub ${LambdaTokenAuthorizerFunction.Arn}


  #------ State Machine Task Definitions -------------------------------------------------------------------------------------------------------------
  HandleInputFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/src/state-machines/tasks/
      Handler: HandleInput.handleInput
      Runtime: nodejs18.x
      Architectures:
        - x86_64
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - HandleInput.ts

  HandleInput2Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/src/state-machines/tasks/
      Handler: HandleInput2.handleInput
      Runtime: nodejs18.x
      Architectures:
        - x86_64
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - HandleInput2.ts
  
  SendSESEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/src/state-machines/tasks/
      Handler: SendSESEmail.sendEmail
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
       - SESCrudPolicy:
          IdentityName: !Ref BaseEmailAddress
      Environment:
        Variables:
          EMAIL_ADDRESS: !Ref BaseEmailAddress
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - SendSESEmail.ts
  
  UploadJSONToBucketFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/src/state-machines/tasks/
      Handler: UploadJSONToBucket.uploadJSONToBucket
      Runtime: nodejs18.x
      Role: 
        !GetAtt LambdaS3AccessPointRole.Arn
      Architectures:
        - x86_64
      Environment:
        Variables:
          BUCKET_NAME: !Ref S3Bucket
          ACCESS_POINT_ARN: !GetAtt S3AccessPoint.Arn

    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - UploadJSONToBucket.ts
  #------ API Config -------------------------------------------------------------------------------------------------------------
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${AppName}-api
      OpenApiVersion: '3.0.0'
      StageName: !Sub ${Stage}
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: application/src/service-layer/swagger.yaml
  
  #------ Cognito UserPool Config -------------------------------------------------------------------------------------------------------------
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: CognitoUserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
  
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: CognitoUserPoolClient
      GenerateSecret: false

  #------ DYNAMO Config -------------------------------------------------------------------------------------------------------------
  ExampleTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: single-table-design-table
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  #------ PRODUCTS Lambda Functions -------------------------------------------------------------------------------------------------------------
  CreateProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/src/service-layer/lambda-handlers/
      Handler: ProductHandler.createProduct
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
       - DynamoDBCrudPolicy:
          TableName: !Ref ExampleTable
      Environment:
        Variables:
          TABLE_NAME: !Ref ExampleTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - ProductHandler.ts

  GetProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/src/service-layer/lambda-handlers/
      Handler: ProductHandler.getProduct
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
       - DynamoDBCrudPolicy:
          TableName: !Ref ExampleTable
      Environment:
        Variables:
          TABLE_NAME: !Ref ExampleTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - ProductHandler.ts

  DeleteProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/src/service-layer/lambda-handlers/
      Handler: ProductHandler.deleteProduct
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
       - DynamoDBCrudPolicy:
          TableName: !Ref ExampleTable
      Environment:
        Variables:
          TABLE_NAME: !Ref ExampleTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - ProductHandler.ts

  #------ WAREHOUSE Lambda Functions ------------------------------------------------------------------------------------------------------------
  CreateWarehouseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/src/service-layer/controllers/
      Handler: WarehouseController.createWarehouse
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
       - DynamoDBCrudPolicy:
          TableName: !Ref ExampleTable
      Environment:
        Variables:
          TABLE_NAME: !Ref ExampleTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - WarehouseController.ts

  GetWarehouseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/src/service-layer/controllers/
      Handler: WarehouseController.getWarehouse
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
       - DynamoDBCrudPolicy:
          TableName: !Ref ExampleTable
      Environment:
        Variables:
          TABLE_NAME: !Ref ExampleTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - WarehouseController.ts

  DeleteWarehouseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/src/service-layer/controllers/
      Handler: WarehouseController.deleteWarehouse
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
       - DynamoDBCrudPolicy:
          TableName: !Ref ExampleTable
      Environment:
        Variables:
          TABLE_NAME: !Ref ExampleTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - WarehouseController.ts

#------ PRODUCT_WAREHOUSE Lambda Functions------------------------------------------------------------------------------------------------------------
  AddStockOfProductToWarehouseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/src/service-layer/controllers/
      Handler: ProductWarehouseController.addStockOfProductToWarehouse
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
       - DynamoDBCrudPolicy:
          TableName: !Ref ExampleTable
       - SNSPublishMessagePolicy:
          TopicName: !GetAtt ProductWarehouseSNSTopic.TopicName
      Environment:
        Variables:
          TABLE_NAME: !Ref ExampleTable
          SNS_TOPIC: !Ref ProductWarehouseSNSTopic
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - ProductWarehouseController.ts

  PrintTopicSubscriptionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/src/service-layer/subscriptions/
      Handler: ProductWarehouseSubscriptions.print
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            FilterPolicy:
              origin:
                - addStockOfProductToWarehouse
            Topic: !Ref ProductWarehouseSNSTopic            

      Environment:
        Variables:
          SNS_TOPIC: !Ref ProductWarehouseSNSTopic
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - ProductWarehouseSubscriptions.ts

  GetAllStockForProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/src/service-layer/controllers/
      Handler: ProductWarehouseController.getAllStockForProduct
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
       - DynamoDBCrudPolicy:
          TableName: !Ref ExampleTable
      Environment:
        Variables:
          TABLE_NAME: !Ref ExampleTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - ProductWarehouseController.ts
  
#------ SNS Definitons ------------------------------------------------------------------------------------------------------------
  ProductWarehouseSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: ProductWarehouseSNSTopic
      TopicName: ProductWarehouseSNSTopic

