
openapi: 3.0.0

info:
  title: openapi-example-specification
  version: 0.3.0
  description: "An Open API Specification for my Scratchpad"

x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
  ex-paramater-validation:
    validateRequestBody: false
    validateRequestParameters: true
  ex-body-validation:
    validateRequestBody: true
    validateRequestParameters: false

x-amazon-apigateway-gateway-responses:
  BAD_REQUEST_BODY:
    statusCode: 400
    responseTemplates:
      application/json: "{\n\"message\": $context.error.messageString $context.error.validationErrorString,\n\"statusCode\": 400\n}"
  BAD_REQUEST_PARAMETERS:
    statusCode: 400
    responseTemplates:
      application/json: "{\n\"message\": $context.error.messageString,\n\"statusCode\": 400\n}"
  

paths:
  /products:
    post:
      operationId: createProduct
      x-amazon-apigateway-request-validator: ex-body-validation
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiAccessRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateProductFunction.Arn}/invocations
        httpMethod: POST
        timeoutInMillis: 3000
        type: "aws_proxy"
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      
      responses:
        '201':
          description: A 201 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
      security:
        - UserPool: []

  /products/{productId}:
    get:
      operationId: getProduct
      x-amazon-apigateway-request-validator: ex-paramater-validation
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiAccessRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetProductFunction.Arn}/invocations
        httpMethod: POST
        timeoutInMillis: 3000
        type: "aws_proxy"

      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string

      responses:
        '200':
          description: A 200 response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'

    delete:
      operationId: deleteProduct
      x-amazon-apigateway-request-validator: ex-paramater-validation
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiAccessRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteProductFunction.Arn}/invocations
        httpMethod: POST
        timeoutInMillis: 3000
        type: "aws_proxy"

      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string

      responses:
        '204':
          description: A 204 response 

  /products/{productId}/stock:
    post:
      operationId: AddStockOfProductToWarehouse
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiAccessRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddStockOfProductToWarehouseFunction.Arn}/invocations
        httpMethod: POST
        timeoutInMillis: 3000
        type: "aws_proxy"
      
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddStockOfProductToWarehouseRequest'
      
      responses:
        '201':
          description: A 201 response.
          content:
            application/json:
              schema:
                type: object

    get:
      operationId: getAllStockForProduct
      x-amazon-apigateway-request-validator: ex-paramater-validation
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiAccessRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAllStockForProductFunction.Arn}/invocations
        httpMethod: POST
        timeoutInMillis: 3000
        type: "aws_proxy"
      
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      
      responses:
        '200':
          description: A 200 response.
          content:
            application/json:
              schema:
                type: object

  /warehouses:
    post:
      operationId: createWarehouse
      x-amazon-apigateway-request-validator: ex-body-validation
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiAccessRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateWarehouseFunction.Arn}/invocations
        httpMethod: POST
        timeoutInMillis: 3000
        type: "aws_proxy"
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWarehouseRequest'
      
      responses:
        '201':
          description: A 201 response.
          content:
            application/json:
              schema:
                type: object

  /warehouses/{warehouseId}:
    get:
      operationId: getWarehouse
      x-amazon-apigateway-request-validator: ex-paramater-validation
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiAccessRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetWarehouseFunction.Arn}/invocations
        httpMethod: POST
        timeoutInMillis: 3000
        type: "aws_proxy"

      parameters:
        - name: warehouseId
          in: path
          required: true
          schema:
            type: string

      responses:
        '200':
          description: A 200 response
          content:
            application/json:
              schema:
                type: object

    delete:
      operationId: deleteWarehouse
      x-amazon-apigateway-request-validator: ex-paramater-validation
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub: ${ApiAccessRole.Arn}
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteWarehouseFunction.Arn}/invocations
        httpMethod: POST
        timeoutInMillis: 3000
        type: "aws_proxy"

      parameters:
        - name: warehouseId 
          in: path
          required: true
          schema:
            type: string

      responses:
        '204':
          description: A 204 response
          content:
            application/json:
              schema:
                type: object

components:
  securitySchemes:
    UserPool:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - Fn::Sub: ${CognitoUserPool.Arn}

  schemas:
    CreateProductRequest:
      type: object
      properties:
        name:
          type: string
          description: text
        description:
          type: string
          description: text
      required:
        - name
        - description

    ProductResponse:
      type: object
      properties:
        name:
          type: string
          description: text
        description:
          type: string
          description: text
        productId:
          type: string
          description: text
      required:
        - name
        - description
        - productId

    CreateWarehouseRequest:
      type: object
      properties:
        name:
          type: string
          description: text
        postcode:
          type: string
          description: text
      required:
        - name
        - postcode

    AddStockOfProductToWarehouseRequest:
      type: object
      properties:
        warehouseId:
          type: string
          description: text
        quantity:
          type: number
          description: number
      required:
        - warehouseId
        - quantity